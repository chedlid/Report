Analysis Services
SSAS (SQL Server Analysis Services) supports various OLAP models: ROLAP, HOLAP, MOLAP and Tabular, which is an in-memory OLAP model very similar to that used by Jedox. Jedox offers only in-memory OLAP, which is advantageous in query response times but restricts the technology to small to medium databases. SSAS supports partitioning of databases, as well as different levels of latency for OLAP, which means it can automate various aspects of its own processing to maintain near-real time data. The development environment for SSAS, Visual Studio, is recognized as one of the most feature-rich, robust and easy to use tools for development, whereas Jedox offers its own web-based development tool. While easy to use it lacks many of the features of Visual Studio, including drag and drop linking of objects, visual design and server, solution and object explorer windows to navigate typically complex OLAP projects.
Palo does not offer anything that is not currently available in the latest version of SSAS other than GPU support for queries, although the need for this feature seems unclear (as in-memory databases offer marked query speed advantages the benefit from GPU support seems marginal and is not verified as offering significant additional value). While there are advantages to in-memory databases (mainly query speed) there are disadvantages, primarily the support for large databases. The lack of flexibility in this respect is a disadvantage as VistaPrint BI currently supports large enough OLAP databases that Palo is not a viable technology for them. Additionally, because SSAS now has its own in-memory columnar OLAP technology (xVelocity, formerly VertiPaq) there seems little value in adding Palo to the BI-supported technology stack; everything that Palo offers is offered by the more familiar, documented and supported SSAS.
Palo doesn't offer aggregations for measures or measure groups, which is one of the main benefits of other OLAP technologies in that storing numbers aggregated above the most granular level for a dimension avoids a query-time calculation of that aggregation (e.g. it lacks the ability to store order value at, say, the calendar year level instead of the date level, meaning each query for a year's order value must add up 365 numbers to achieve the result; with many dimensions the addition of stored numbers can reach the product of each dimensions' member count).
Palo only supports single-attribute dimensions, although it's possible this is a terminology ambiguity and dimensions can be combined into hierarchies. The combination mechanism is textual or Perl-based, and it's difficult to see how the optimizations achieved in SSAS by relating multiple attributes within a dimension (query resolution using hierarchical functions, for instance) can be achieved using this method.
The cube development process in Palo is very different from SSAS as it requires explicit attribute and measure definitions, which are later rolled up (metadata-wise) into dimensions and cubes, rather than pulling schema definitions from an existing relational data warehouse to build OLAP objects. The development process is more akin to developing a relational warehouse in style where objects are created independently and filled by ETL explicitly designed to fetch data in by field, rather than being based on existing structures and being filled by generic processing instructions.

QlikView
QlikView is a visualization tool that supports an in-memory data store, and has a large number of chart types and options. There is no clear advantage apparent in the ease with which new visualizations can be created and this may be more a matter of familiarity with the tool, but QlikView offers the ability to generate fast data loads by creating load scripts, on which new visualizations can be created. Jedox is more a typical OLAP database which requires up-front planning and build before visualizations can be created, and more involvement with some IT or BI function should new data be required by users to build visualizations.


T-SQL (for ETL)
The current model for ETL (Extract, Transform, Load) in VistaPrint is to use stored procedures. Naming convention dictates their placement and the use of a common schema name their grouping, but there is little organization of the procedures in development. Jedox supports ETL projects and components which can be reused between functional ETL flows, supporting code reuse and ease of team development and ETL awareness, things which are lacking in a text-based, low-reuse environment such as T-SQL. It's not clear how performance compares between the tools and, given the high volumes of data that need to be moved, performance is a factor that may either decide for or against an ETL tool.
The ETL component is more visual than stored procedures and so may be more intuitive than using T-SQL for inexperienced or non-technical users. Its ease of use, ability to reuse components between data flows and the potential for offloading transformation cost from the source and target database servers are an advantage, although its overall performance capabilities are not clear. It also lacks intellisense and a clear path through each dataflow, and context switching, using drop downs for component selection and small buttons to add or edit components is cumbersome in comparison to writing SQL or using a more mature ETL product (e.g. Informatica, SSIS).